/*
Copyright 2009-2010 Igor Polevoy

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package activejdbc;

import java.util.HashMap;
import java.util.Locale;

/**
 * Collection of error messages generated by validation process.
 *
 * @author Igor Polevoy
 * @see {@link activejdbc.Messages}
 */
public class Errors extends HashMap<String, String> {

    private Locale locale;

    /**
     * Sets a locale on this instance. All messages returned from {@link #get(Object)} and {@link #get(Object, Object...)}
     * methods will be returned according to rules of Java Resource Bundles.
     *
     * @param locale locale instance to configure this object.
     */
    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    /**
     * Provides a message from a resource bundle <code>activejdbc_messages</code> with default locale.
     * If key is not found in a bundle, it returns the value of the key itself.
     *
     * @param key key of a message from a bundle.
     * @return a message from a resource bundle <code>activejdbc_messages</code> with default locale.
     */
    @Override
    public String get(Object key) {
        String rbKey = super.get(key);
        //suppose rbKey is a key for resource bundle
        return locale != null ? Messages.message(rbKey, locale) : Messages.message(rbKey);

    }

    /**
     * Provides a message from the resource bundle <code>activejdbc_messages</code> with default locale which is merged
     * with parameters. This methods expects the message in the resource bundle to be parametrized.
     *
     * @param key    message key.
     * @param params list of parameters for a message. The order of parameters in this list will correspond to the
     *               numeric order in the parameters listed in the message and has nothing to do with a physical order. This means
     *               that the 0th parameter in the list will correspond to <code>{0}</code>, 1st to <code>{1}</code> and so on.
     * @return a message from the resource bundle <code>activejdbc_messages</code> with default locale, which is merged
     *         with parameters. If key is not found in a bundle, it returns the value of the key itself.
     */
    public String get(Object key, Object... params) {
        String rbKey = super.get(key);
        //suppose rbKey is a key for resource bundle
        return locale != null ? Messages.message(rbKey, locale, params) : Messages.message(rbKey, params);
    }
}
