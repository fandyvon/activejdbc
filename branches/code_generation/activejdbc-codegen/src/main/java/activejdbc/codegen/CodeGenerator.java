/**
 *
Copyright 2012 Kalyan Mulampaka

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package activejdbc.codegen;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.javalite.activejdbc.Base;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Code generator class which creates Java bean classes and interfaces for all the tables in the input database schema.
 * Reads the properties file named generator.properties from the current directory.
 * Usage: java -cp activejdbc-codegen.jar CodeGenerator [tmp/generator.properties]
 * @author Kalyan Mulampaka
 *
 */
public class CodeGenerator
{
	final static Logger logger = LoggerFactory.getLogger(CodeGenerator.class);
	private Properties properties;

	public CodeGenerator ()
	{

	}

	public Properties getProperties ()
	{
		return properties;
	}

	public void setProperties (Properties properties)
	{
		this.properties = properties;
	}

	public void generate ()
	{
		try
		{
			String driver = this.properties.getProperty("jdbc.driverClassName");
			String url = this.properties.getProperty("jdbc.url");
			String userName = this.properties.getProperty("jdbc.username");
			String password = this.properties.getProperty("jdbc.password");
			Base.open(driver, url, userName, password);
			String packageName = this.properties.getProperty("package.name");
			logger.info("Connecting to database at:[" + url + "]" + " with username/password:[" + userName + "/" + password + "]");
			Connection conn = Base.connection();
			DatabaseMetaData metaData = conn.getMetaData();
			String modelClassName = this.properties.getProperty("model.classname");
			if (metaData != null)
			{

				CodeGenUtil.createPackage(packageName);

				ResultSet rset = metaData.getTables(null, null, null, new String[]
				{ "TABLE" });
				while (rset.next())
				{
					String tbl = rset.getString("TABLE_NAME");
					logger.info("Found Table:" + tbl);
					// strip off the 's' at the end. activejdbc assumes all tables are in plural form
					// e.g Table: employees , Class and Interface files will be created as Employee.java and IEmployee.java
					String tableName = tbl.substring(0, tbl.length()-1);
					Interfaze i = new Interfaze();
					i.setName(tableName);
					List<Method> methods = new ArrayList<Method>();
					i.setMethods(methods);
					i.setPackageName(packageName);

					Clazz clazz = new Clazz();
					clazz.setName(tableName);
					clazz.setPackageName(packageName);
					clazz.setExtendsClassName(modelClassName);
					clazz.setInterfaceName(i.getName());
					clazz.setMethods(methods);
					ResultSet cset = metaData.getColumns(null, null, tbl, null);
					while (cset.next())
					{
						String colName = cset.getString("COLUMN_NAME");
						logger.info("Found Column:" + colName);
						if (colName.equalsIgnoreCase("id"))
						{

							logger.info("Column is an autogenerated id, continue");
							continue;

						}
						int type = cset.getInt("DATA_TYPE");
						logger.info("Column DataType:" + type);
						Method method = new Method();
						methods.add(method);
						method.setName(colName);

						Parameter parameter = null;
						if ((type == Types.VARCHAR) || (type == Types.LONGVARCHAR) || (type == Types.CLOB))
						{
							parameter = new Parameter(colName, ParameterType.STRING);
						}
						else if (type == Types.BIGINT)
						{
							parameter = new Parameter(colName, ParameterType.LONG);
						}
						else if ((type == Types.DOUBLE))
						{
							parameter = new Parameter(colName, ParameterType.DOUBLE);
						}
						else if ((type == Types.FLOAT) || (type == Types.DECIMAL))
						{
							parameter = new Parameter(colName, ParameterType.FLOAT);
						}
						else if ((type == Types.INTEGER) || (type == Types.NUMERIC) || (type == Types.SMALLINT) || (type == Types.TINYINT))
						{
							parameter = new Parameter(colName, ParameterType.INTEGER);
						}
						else if ((type == Types.TIMESTAMP) || (type == Types.TIME) || (type == Types.DATE))
						{
							parameter = new Parameter(colName, ParameterType.DATE);
						}
						else if ((type == Types.BIT) || (type == Types.BOOLEAN))
						{
							parameter = new Parameter(colName, ParameterType.BOOLEAN);
						}
						else if (type == Types.CHAR)
						{
							parameter = new Parameter(colName, ParameterType.CHAR);
						}
						else
						{
							// no specific type found so set to generic object
							parameter = new Parameter(colName, ParameterType.OBJECT);
						}
						method.setParameter(parameter);
					}
					i.createFile();
					clazz.createFile();
				}
				CodeGenUtil.createColumnFile(packageName);
			}
		}
		catch (Exception e)
		{
			logger.error("Error occcured during code generation." + e);
			e.printStackTrace();
		}
	}

	/**
	 * @param args
	 */
	public static void main (String[] args)
	{
		try
		{
			String propertiesFile = "generator.properties";
			if (args != null && args.length > 0)
			{
				propertiesFile = args[0];
				logger.info("Properties file Location:" + propertiesFile);
			}
			logger.info("Loading properties from file:" + propertiesFile);
			CodeGenerator generator = new CodeGenerator();
			FileInputStream propFile = new FileInputStream(propertiesFile);
			generator.properties = new Properties();
			generator.properties.load(propFile);
			logger.debug("Loaded properties:" + generator.properties);
			generator.generate();
		}
		catch (Exception e)
		{
			logger.error("Error:" + e);
		}
	}

}
