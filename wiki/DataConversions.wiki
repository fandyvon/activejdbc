#summary how ActiveJDBC performs data conversions

= Pass-through framework =

ActiveJDBC is a *pass-through framework*. This means that for the most part, it does not attempt to convert data types and relies on the underlying driver for most data conversions during read and write operations. Most database drivers do a great deal of conversion

  * *select operations*: during select operations, the driver will populate your models with whatever types that are mapped from DB table columns to appropriate Java types.
  * *insert/update operations*

=How to see mapped type=
This is pretty easy, insert a record into a table using standard DBMS tools, and then query it like this:
{{{

Person p = Person.findAll().get(0);
System.out.println("DOB type: " + p.get("dob").getClass());
}}}


=Convenience conversion methods=

include clobs

=Typed setters and getters=

If you like more control over types, you can provide typed getters and setters:

{{{
Person p = new Person();
p.setName("John");
p.setDob(new Date(12345L));
}}}

=What happens if I stick a wrong type?=

If you do this:
{{{
Student p = new Student();
p.set("first_name", "John");
p.set("last_name", "Doe");
p.set("dob", 1); // ===>>  this is wrong type for BOB field
p.saveIt();
}}}

you are going to get an exception from the DBMS itself, if it cannot convert the type:
{{{

activejdbc.DBException: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Incorrect date value: '1' for column 'dob' at row 1, Query: INSERT INTO students (first_name, dob, last_name) VALUES (?, ?, ?), params: John,1,Doe
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:2868)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1573)
	at com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1169)
	at com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:693)
}}}