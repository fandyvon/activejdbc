#summary ActiveJDBC Caching
<wiki:toc max_depth="2" />
= Introduction =

Caching is an integral part of every major system, It improves performance, reduces IO and makes overall user experience more pleasurable. Caching in ActiveJDBC works on the level of query and creation of model instances. For instance, the call:

{{{
List<Library> illLibs = Library.where("state = ?", "IL");
}}}
might call into DB, or a result can come from cache, depending how cache and specifically model `Library` was configured

=Cache annotation=
ActiveJDBC provides annotation to specify queries against which tables will be cached:

{{{
@Cached
public class Library extends Model {}
}}}

As in other cases, this is a declaration that marks a model as "cachable". If you enable logging (by providing a system property `activejdbc.log`), you will see extensive output from ActiveJDBC, similar to this:
{{{
3076 [main] INFO activejdbc.DB - Query: "SELECT * FROM libraries WHERE id = ?", with parameters: [1], took: 0 milliseconds
3076 [main] INFO activejdbc.cache.QueryCache - HIT, "SELECT * FROM libraries WHERE id = ?", with parameters: [1]
3077 [main] INFO activejdbc.DB - Query: "INSERT INTO libraries (address, state, city) VALUES (?, ?, ?)", with parameters: [123 Pirate Street, CA, Bloomington], took: 1 milliseconds
3077 [main] INFO activejdbc.cache.QueryCache - table cache purged for: libraries
3077 [main] INFO activejdbc.cache.QueryCache - table cache purged for: books
3077 [main] INFO activejdbc.cache.QueryCache - MISS, "SELECT * FROM libraries WHERE id = ?", with parameters: [1]
3078 [main] INFO activejdbc.DB - Query: "SELECT * FROM libraries WHERE id = ?", with parameters: [1], took: 0 milliseconds
}}}


=Cache purging=

If you examine the log from above, you will see that after an insert statement into the "LIBRARIES" table, the system is purging cache related to this table, as well as "BOOKS" table. ActiveJDBC does this since the cache in memory might be potentially of out sync with the data in the DB, and hence will be purged. Related tables' caches are also purged. Since there exists relationship: library has many books,  the books cache could also be stale, and this is a reason why a table "BOOKS" purged as well. 

If you want to manually purge caches (in cases you make destructive data operations outside Model API), you can do so:
{{{
activejdbc.cache.QueryCache.instance().purgeTableCache("books");
}}}

=Cache provider=
ActiveJDBC has a simple plugin framework for adding cache providers, but currently supports only one: [http://www.opensymphony.com/oscache/ OSCache]. OSCache is a known, well tested cache solution for Java, which supports many ways to cache data(memory, file system, clustering, etc.). For more information, see their documentation [http://www.opensymphony.com/oscache/wiki/Documentation.html OSCache Documentation].

=What to cache=
While caching is a complex issue, I can suggest caching predominantly lookup data. Lookup data is something that does not change very frequently. If you start caching everything, you might run into a problem of cache thrashing where you fill cache with data, and purge it soon after, without having a benefit of caching. Instead of improving performance, you will degrade it with extra CPU, RAM and IO (is cluster is configured) used and little or no benefit of having a cache in the first place. 

=OSCache configuration for cluster=
In case your application is deployed in a cluster, and you use caching in ActiveJDBC, you will need to configure clustering. This is necessary so that when your application invokes a destructive action, a proper purge events are distributed in a cluster. OSCache is very efficient, as it does not share the actual data across cluster. Each cluster will have its own caches based on a usage on that cluster. Whenever a purge event is generated on one node in the cluster, this event will be broadcast by OSCache to other nodes, effectively blowing the same caches across entire cluster. These events are lightweight and very fast (UDP, using JGroups).
For more information on configuration of OSCache clustering, look here:[http://www.opensymphony.com/oscache/wiki/Clustering.html]

Back to [Features]