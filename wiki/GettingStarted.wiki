Although ActiveJDBC has advanced features, 

= Create a table =
This is an SQL statement to create a table (MySQL used for this example):
{{{
CREATE TABLE employees (
      id  int(11) DEFAULT NULL auto_increment PRIMARY KEY,
      first_name VARCHAR(56),
      last_name VARCHAR(56)
  );
}}}

=Maven configuration=

==Add ActiveJDBC  dependency:==
{{{

        <dependency>
            <groupId>activejdbc</groupId>
            <artifactId>activejdbc</artifactId>
            <version>1.0-SNAPSHOT</version>
            <exclusions>
                <exclusion>
                    <groupId>opensymphony</groupId>
                    <artifactId>oscache</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
}}}

The OSCache is excluded because it is not really used in this simple example. In a real project, if query cache is used, the OSCache dependency will be required.


==Add ActiveJDBC Instrumentation plugin==
In the plugins section of the POM, add this:
{{{
             <plugin>
                <groupId>activejdbc</groupId>
                <artifactId>activejdbc-instrumentation</artifactId>
                <version>1.0-SNAPSHOT</version>
                <executions>
                    <execution>
                        <phase>process-classes</phase>
                        <goals><goal>instrument</goal></goals>
                    </execution>
                </executions>
            </plugin>
}}}

=Write a model=

This is the easiest thing - writing a simple model is usually done with one line of code:
{{{
import activejdbc.Model;

public class Employee extends Model {}
}}}

=Open a connection=
{{{
Base.open("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/test", "root", "p@ssw0rd");
}}}
Base is a utility class that allows to perform some basic (hence the name) JDBC operations, one of them is opening a connection. The connection object is then attached to the current thread, and can be consumed by any ActiveJDBC API.

=Create a new record =
{{{
        Employee e = new Employee();
        e.set("first_name", "John");
        e.set("last_name", "Doe");
        e.saveIt();
}}}

I hope this is self-explanatory. ActiveJDBC models somewhat behave like maps. There are no setters or getters. You can still write them if you like. 

=Finding a single record=
{{{
Employee e = Employee.findFirst("first_name = ?", "John");
}}}
This line will find an instance of Employee (conditionally), if one exists, or null if one does not exist.
